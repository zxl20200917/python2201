16001 MySQL数据库

01 数据库概述
    1 认识数据库
        1.1 数据存储阶段
            1.1.1 人工管理阶段缺点：数据无法共享
            1.1.2 文件管理阶段： .txt .doc .xls
                优点：数据可以长期保存，可以存储大量的数据，使用简单
                缺点： 数据一致性差，数据查找修改不方便，数据冗余度可能比较大
            1.1.3 数据库管理阶段
                优点：数据组织结构化降低了冗余度，提高了增删改查的效率，容易扩展，方便程序调用，做自动化处理
                缺点： 需要使用SQL或者其他特定语句，相对比较复杂
    2 基础概念
        2.1 数据： 能够输入到计算机中并被识别处理的信息集合
        2.2 数据结构： 研究一个数据集合中数据之间的关系的
        2.3 数据库： 按照数据结构，存储管理数据的仓库。数据库是在数据库管理系统管理和控制下，在一定介质上的数据集合。
        2.4 数据库管理系统：管理数据库的软件，用于建立和维护数据库。
        2.5 数据库系统：由于数据库和数据库管理系统，开发工具等组成的集合。
    3 数据库分类
        3.1 关系型数据库和非关系型数据库
            3.1.1 关系型： 采用关系模型（二维表）来组织数据结构的数据库
            3.1.2 非关系型： 不采用关系模型组织数据结构的数据库
        3.2 开源数据库和非开源数据库
            3.2.1 开源： MySQL,SQLite,MongoDB
            3.2.2 非开源： Oralce,DB2,SQL_Server
    4 MySQL数据库
        4.1 Mysql简介
            最为著名，应用最广泛的开源数据库软件
            -最早隶属于瑞典的MySQL AB公司
            -2008年1月 MySQL AB被Sun收购
            -2009年4月 Sun被Oracle收购
        4.2 MySQL特点
            4.2.1 Mysql是开源数据库，使用C和C++编写
            4.2.2 Mysql能够工作在众多不同的平台上
            4.2.3 Mysql提供了用于C，C++，Python，Java，Perl，PHP，Ruby众多语言的API
            4.2.4 Mysql存储结构优良，运行速度快
            4.2.5 Mysql功能全面丰富
        4.3 MySQL安装
            4.3.1 Ubuntu安装MySQL服务
                4.3.1.1 安装服务端： sudo apt-get install mysql-server
                4.3.1.2 安装客户端： sudo apt-get install mysql-client
                4.3.1.3 配置文件： /etc/mysql
                4.3.1.4 命令集： /usr/bin
                4.3.1.5 数据库存储目录： /var/lib/mysql
                4.3.1.6 环境配置
                    4.3.1.6.1 配置系统： kali
                    4.3.1.6.2 安装方式： 系统默认安装
                    4.3.1.6.3 登录方式：
                        4.3.1.6.3.1 root：  mysql
                        4.3.1.6.3.2 非root：  sudo mysql
                    4.3.1.6.4 mysql版本：
                        MariaDB [mysql]> status
                        --------------
                        mysql  Ver 15.1 Distrib 10.5.12-MariaDB, for debian-linux-gnu (x86_64) using  EditLine wrapper

                        Connection id:          32
                        Current database:       mysql
                        Current user:           root@localhost
                        SSL:                    Not in use
                        Current pager:          stdout
                        Using outfile:          ''
                        Using delimiter:        ;
                        Server:                 MariaDB
                        Server version:         10.5.12-MariaDB-1 Debian 11
                        Protocol version:       10
                        Connection:             Localhost via UNIX socket
                        Server characterset:    utf8mb4
                        Db     characterset:    utf8mb4
                        Client characterset:    utf8
                        Conn.  characterset:    utf8
                        UNIX socket:            /run/mysqld/mysqld.sock
                        Uptime:                 8 min 48 sec

                        Threads: 1  Questions: 104  Slow queries: 0  Opens: 37  Open tables: 30  Queries per second avg: 0.196
                4.3.1.7 密码设置
                    4.3.1.7.1 创建'root'@% 用户设置密码
                        MariaDB [mysql]> create user 'root'@'%' identified by 'zhangxuelong';
                    4.3.1.7.2 把原来用户'root'@'localhost'用户设置密码
                        MariaDB [mysql]> alter user 'root'@'localhost' identified by 'zhangxuelong';
                4.3.1.8 验证密码登录
                    └─$ sudo mysql -uroot -pzhangxuelong                                                                      1 ⚙
                        Welcome to the MariaDB monitor.  Commands end with ; or \g.
                        Your MariaDB connection id is 35
                        Server version: 10.5.12-MariaDB-1 Debian 11

                        Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

                        Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

                        MariaDB [(none)]>
            4.3.2 MySQL服务
                4.3.2.1 查看mysql服务状态
                    sudo /etc/init.d/mysql status
                    systemctl status mysqld.service
                4.3.2.2 启动服务
                    sudo /etc/init.d/mysql start|stop|restart
                    systemctl mysql start|stop|restart
                4.3.2.3 客户端连接服务
                    mysql -h主机地址 -u用户名 -p密码
                    本地连接可省略-h选项：mysql -uroot -pzhangxuelong
                4.3.2.4 退出mysql服务连接
                    ctrl + d
                    exit
                    \q

02 数据库和数据表（一）
    2.1 关系型数据库
        mysql是一个关系型的数据库，关系型数据库指的是通过关系模型构建的数据库
        结构如下：
            数据元素---->记录----->数据表----->数据库
        数据表（table)：存放数据的表格
        字段（column）：每个列，用来表示该列数据的含义
        记录（row）：每个行，表示一组完整的数据
    2.2 SQL语言
        SQL（Structured Query Language)结构化查询语言，是一种数据库查询和程序设计语言，用于存取数据以及查询，更新和管理关系数据
        库系统，同时也是数据脚本文件的扩展名
        2.2.1 SQL语言特点
            2.2.1.1 SQL语句使用特点
                sql语言基本上独立于数据库本身
                各种不同的数据库对SQL语言的支持与标准存在着细微的不同
                每条命令必须以;结尾
                SQL命令不区分字母大小写
    2.3 构建数据库
        2.3.1 查看已有库
            show databases;
        2.3.2 创建库
            create database 库名 [character set utf8];
            实例：
                create database stu character set utf8;
                create database stu charset=utf8;
        2.3.3 查看创建库的语句
            show create database 库名；
            查看stu创建方法：
                show create database stu;
        2.3.4 查看当前所在库
            select database()
        2.3.5 切换库
            use 库名
        2.3.6 删除库
            drop database 库名；
03 数据库和数据表（二）
    3.1 数据表设计
        根据业务需要设计存储内容
        根据存储内容构建表的字段结构
        根据字段特征确定字段类型
    3.2 数据表创建
        3.2.1 创建表
            create table 表名（
                字段名 数据类型    字段约束;
                字段名 数据类型    字段约束;
                ...
                字段名 数据类型    字段约束;
                字段名 数据类型    字段约束;
            );
        3.2.2 整数数据类型支持
            tinyint     1字节
            smallint    2
            mediumint   3
            int         4
            bigint      8
            float       4
            double      8
            decimal     DECIMAL（M，D） 依赖于M和D的值
        3.2.3 字符串数据类型支持
            char        0-255字节         定长字符串
            varchar     0-65535          变长字符串
            tinyblob    0-255               不超255个字符的二进制字符串
            tinytext    0-255           短文本字符串
            blob        0-65535
            text        0-65535
            mediumblob  0-16777215
            mediumtext  0-16777215
            longblob    0-4294967295
            longtext    0-4294967295
        3.2.4 其他类型支持
            enum: 从给定值的集合中选择某个值
            set： 从给定值的集合中选择一个或者多个值
                set(值1,值2,.....值n）
        3.2.5 字段约束
            3.2.5.1 设置数字为无符号则加上unsigned
            3.2.5.2 不想字符为null可以设置字段的属性为not null，在操作数据库时如果输入该字段为null，就会报错
            3.2.5.3 default表示设置一个字段的默认值
            3.2.5.4 auto_increment定义列为自增的属性，一般用于主键，数值会自动加1
            3.2.5.5 primary key 关键字用于定义表为主键。主键的值不能重复，且不能为空
        3.2.6 数据表示例
            3.2.6.1 创建班级表
                create table class_1 (id int primary key auto_increment,
                    name varchar(32) not null,
                    age tinyint unsiged not null,
                    sex enum('w','m'),
                    score float default 0.0);
            3.2.6.2 创建兴趣班表
                create table interest(id int primary key auto_increment,
                    name varchar(32) not null,
                    hobby set('sing','dance','draw'),
                    level char not null,
                    price decimal(6,2),
                    remark text);
        3.2.7 数据表操作
            3.2.7.1 查看数据表
                show tables;
            3.2.7.2 查看已有表的字符集
                show create table 表名；
            3.2.7.3 查看表结构
                desc 表名；
            3.2.7.4 删除表
                drop table 表名；
04 增删改查语句
    4.1 insert 语句
        4.1.1 语法格式
            insert into 表名 values(值1），（值2），....;
            insert into 表名 （字段1,...) values (值1），...
        4.1.2 示例
            insert into class_1 values ( 2,'Baron',10,'m',91),(3,'Jame',9,'m',90);
    4.2 select 语句
        4.2.1 语法格式
            select * from 表名 [where 条件];
            select 字段1,字段2 from 表名 [where 条件];
        4.2.2 示例
            select * from class_1;
            select name,age from class_1;
        4.2.3 where 子句
            where子句在sql语句中扮演了重要角色，主要通过一定的运算条件进行数据的筛选
            4.2.3.1 算术运算符
                +           加法
                -           减法
                ×           乘法
                /或DIV       除法
                %或MOD       取余
            4.2.3.2 比较运算符
                =               等于
                <>,!=           不等于
                >               大于
                <               小于
                <=              小于等于
                >=              大于等于
                between         在两值之间
                not between     不在两值之间
                in              在集合中
                not in          不在集合中
                <=>             严格比较两个NULL值是否相等
                like            模糊匹配
                regexp或rlike    正则式匹配
                is null         为空
                is not null     不为空
            4.2.3.3 逻辑运算符
                not 或！          逻辑非
                and              逻辑与
                or               逻辑或
                xor              逻辑异或
            4.2.3.4 位运算符
                &               按位与
                |               按位或
                ^               按位异或
                ！               取反
                <<              左移
                >>              右移
    4.3 update语句
        4.3.1 语法格式
            update 表名 set 字段1=值1,字段2=值2,... where 条件；
        4.3.2 示例
            update class_1 set age=11 where name='Abby';
            MariaDB [(none)]> update class_1 set sex='w' where name 'Emma';
    4.4 delete 语句
        4.4.1 语法
            delete from 表名 where 条件;
            注意：delete语句后如果不加where条件，所有记录全部清空，有where作为条件匹配只删除匹配的行。

05 alter和时间类型
    5.1 修改表结构
        alter table 表名 add 字段名 数据类型；
        alter table 表名 add 字段名 数据类型 first;
        alter table 表名 add 字段名 数据类型 after 字段名；
        alter table 表名 drop 字段名；
        alter table 表名 modify 字段名 新数据类型；
        alter table 表名 change 旧字段名  新字段名  新数据类型；
        alter table 表名 rename 新表名；
    5.2 时间数据类型
        5.2.1 时间和日期类型
            日期DATE，日期时间DATETIME，时间TIMESTAMP
            时间TIME
            年份YEAR
            DATE            3字节             YYYY-MM-DD
            TIME            3                HH：MM：SS
            YEAR            1                YYYY
            DATETIME        8                YYYY-MM-DD HH：MM：SS
            TIMESTAMP       4                YYYYMMDD HHMMSS
        5.2.2 应用实例
            MariaDB [(none)]> create database test;
            Query OK, 1 row affected (0.001 sec)

            MariaDB [(none)]> use test
            Database changed
            MariaDB [test]> create table marathon(
                -> id int primary key auto_increment,
                -> alhlete varchar(50) not null,
                -> birthday date,
                -> registeration_time datetime,
                -> performance time);
            Query OK, 0 rows affected (0.010 sec)

            MariaDB [test]> insert into marathon values (1,'caocao','1990-2-8',"2020/6/8 15:17:23","2:18:26");
            Query OK, 1 row affected (0.003 sec)

            MariaDB [test]> select * from marathon;
            +----+---------+------------+---------------------+-------------+
            | id | alhlete | birthday   | registeration_time  | performance |
            +----+---------+------------+---------------------+-------------+
            |  1 | caocao  | 1990-02-08 | 2020-06-08 15:17:23 | 02:18:26    |
            +----+---------+------------+---------------------+-------------+
            1 row in set (0.000 sec)

            MariaDB [test]>
    5.3 日间日期函数
        5.3.1 返回服务器当前日期时间,格式对应datetime类型
            now()
        5.3.2 返回当前日期，格式对应date类型
            curdate()
        5.3.3 返回当前时间，格式对应time类型
            curtime()
    5.4 时间运算
        5.4.1 语法格式
            select * from 表名  where 字段名 运算符 （时间-interval 时间间隔单位）；
            5.4.1.1 时间间隔单位
                2 hour
                1 minute
                2 second
                2 year
                3 month
                1 day
        5.4.2 示例
            查找注册时间在一周以内的记录
            select * from marathon where registration_time > (now() - interval 7 day);
06 高级查询语句
<<<<<<< HEAD


=======
>>>>>>> 9995fea4aa97a90a7586e8afae6765bd6b6a57a1
