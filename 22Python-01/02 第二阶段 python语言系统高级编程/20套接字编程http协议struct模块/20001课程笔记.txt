01 TCP套接字编程(续)
    1.1 TCP客户端套接字编程
        1.1.1 TCP套接字客户端流程
            socket ----> connecct ---- send/recv-----> close
        1.1.1 TCP套接字客户端函数
            1. 创建套接字
            2. 请求连接
                connect()
                    功能：发起连接请求
                    参数：是一个元组，表示服务器的地址
            3. 消息收发
            4. 关闭套接字

02 套接字属性及处理细节
    2.1 套接字函数特性
        原因：客户端退出会导致服务端异常退出
        函数特性：当一端套接字退出时，会导致这个套接字自动向另一端返回一个空
        解决办法：依据此特性可以在服务端与客户端的阻塞连接下面增加如下代码来解决判断发送过来的数据
        data = connfd.recv(1024)
        # not data 说明发过来的不是数据就退出，也可以理解为空为假，not 假为真，所以当if not data 为真时退出
        if not data:
            break
    2.2 网络缓冲区
        1. 每个socket被创建后，都会分配两个缓冲区，输入缓冲区和输出缓冲区。
        2. send()并不立即向网络中传输数据，而是先将数据写入缓冲区中，再由TCP协议将数据从缓冲区发送到目标服务器。
        一旦将数据写入到缓冲区，函数就可以成功返回，不管它们有没有到达目标机器，也不管它们何时被发送到网络，这些
        都是TCP协议负责的事情。
        3. recv()函数也是如此，也从输入缓冲区中读取数据，而不是直接从网络中读取。

        2.2.1 TCP粘包
            原因：tcp以字节流方式传输，没有消息边界。多次发送的消息被一次接收，此时就会形成粘包。
            影响：如果每次发送内容是一个独立的含义，需要接收端独立解析此时粘包会有影响。
            2.2.1.1 处理方法
                1. 人为的添加消息边界
                2. 控制发送速度
    2.3 套接字属性
        2.3.1 套接字对象(s表示一个套接字对象)
            s.type:获取套接字类型
            s.family:地址类型
            s.getsockname():获取套接字绑定的地址
            s.getpeername():用户连接套接字，获取连接端的地址
            s.setsockopt(level,optname,value):
                功能：设置套接字选项，丰富修改原有套接字功能
                参数：
                    level:设置选项的类型
                    optname:选项类型中的子选项
                    value:为选定的选项设置值
        2.3.2 操作实例
            当服务端异常退出时，再启用时显示套接字占用，解决办法就是在测试阶段快速释放套接字
            此代码在s.bind()之前使用：
            s.setsockopt(SOL_SOCKET,SO_REUSEADDR,True)


03 UDP套接字编程
    3.1 UDP套接字编程
        3.1.1 UDP服务端编程
            socket ---> bind ----> recv/from -----> sendto----> close
        3.1.2 UDP套接字函数
            3.1.2.1 data,addr = recv/from(buffersize)
                功能：接收UDP消息
                参数：每次最多接收消息的大小
                返回值：接收到的内容
            3.1.2.2 sendto(data,addr)
                功能：udp发送消息
                参数：data要发送的内容，bytes格式；addr 消息要发送的目标地址
                返回值：发送的字节
    3.2 TCP与UDP编程对比
        3.2.1 流式套按字采用字节流的方式传输，而数据报套接字以数据报形式传输
        3.2.2 tcp会产生粘包现象，udp不会
        3.2.3 tcp编程保证传输的可靠性，udp则不保证
        3.2.4 tcp需要listen() accept()创建连接，udp不需要
        3.2.5 tcp使用recv(),send()进行消息收发，udp使用recvfrom()和sendto()

04 HTTP协议
    4.1 http协议简介
        超文本传输协议(http,HyperText transfer Protocol)是互联网上应用最为广泛的一种应用网络协议，所有www文件
        都必须遵守这个标准。
    4.2 http协议特点
        1. 支持客户/服务端模式
        2. 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。
        3. 灵活：http允许传输任意类型的数据对象，正在传输的类型由content-type加以标记
        4. 无状态：http协议是无状态协议，无状态是指协议对于事务处理没有记忆能力。
        5. 无连接：无连接的含义是限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接。
    4.3 http请求
        4.3.1 请求行格式
            GET                 /               HTTP/1.1
            请求种类            请求内容            协议版本
            请求类型：
                8种方法或者叫"动作"来表明对Request-URI指定的资源的不同操作方式，也可以称之为请求类型
            4.3.1.1 请求类型介绍
                1. OPTIONS:返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向WEB服务器发送'*'的请求来测试
                服务器的功能性。
                2. HEAD:向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个
                响应内容的情况下，就可以获取包含在响应消息头中的元消息。
                3. GET:向特定的资源发出请求
                4.POST:向指定资源提交 数据进行处理请求(例如提交表单或者上传文件)。数据被包含在请求体中，POST
                请求可能会导致新的资源的创建/或者已有资源的修改。
                5. PUT:向指定资源位置上传其最新内容
                6. DELETE:请求服务器删除Request-URI所标识的资源。
                7. TRACE: 回显服务器收到的请求，主要用于测试或者诊断
                8. CONNECT: HTTP/1.1 协议中预留。
    4.4 常见响应码
        响应码分为5类
            1xx：提示信息，表示请求已经接受
            2xx：响应成功
            3xx：响应需要重写向
            4xx：客户端错误
            5xx：服务端错误

05 STRUCT模块
    5.1 struct模块介绍
        Python网络套抱头鼠窜了传输只能传输字节流格式数据，这在很多时候不方便，特别是与其他编程语言进行网网络交互
        时，收到的了数据类型的限制，而struct模块可以按照指定格式将python数据转换为字符串，该字符串为字节流，如
        果网络传输时，不能传输int，此时先将int转化为字节流，然后于发送。
        了解C语言的人，一定会知道struct结构体在C语言中的作用，它定义了一种结构，里面包含不同类型的数据(int,char
        ,bool等等）方便对某一结构对象进行处理。
    5.2 struct格式符
        格式符                 c语言类型                   python类型            字节数量
        x                       pad byte                    no value            1
        c                       char                        string of length 1  1
        b                       signd char                  integer             1
        B                       unsigned char               integer             1
        ?                       _bool                       bool                1
        h                       short                       integer             2
        H                       unsigned short              integer             2
        i                       int                         integer             4
        I                       unsigned int                integer             4
        l                       long                        integer             4
        L                       unsigned long               long                4
        q                       long long                   long                8
        Q                       unsigned long long          long                8
        f                       float                       float               4
        d                       double                      float               8
        s                       char[]                      string
        p                       char[]                      string

    5.3 函数接口使用
        5.3.1 Struct(fmt)
            功能：生产struct对象
            参数：
                fmt：定制的数据结构组成
                例如： 要发的数据：1 b'zhang' 1.75 <---> 组织的类型格式：Struct('i5sf')

            返回：struct对象

        5.3.2 st.unpack(bytes_data)
            功用：将bytes字串解析为指定格式数据
            参数：要解析的bytes字串
            返回值：元组，为解析后的内容

        5.3.3 st.pack(v1,v2,v3...)
            功能：将数据按照指定格式打包转换为bytes
            参数：要发送的数据
            返回值：打包后的bytes字串

            






