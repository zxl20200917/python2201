01 文件操作流程
    1.1 什么是IO
        IO在计算机中指INPUT/OUTPUT，也就是输入和输出，由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行
        ，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。
        1.1.1 IO密集和计算密集
            在一个程序中依据IO发生情形的多少可以分为两个IO密集形程序或者计算密集型程序(也叫密集型程序)
            1.1.1.1 IO密集型程序:在程序执行中有大量IO操作，而CPU运算较少，消耗CPU较少，耗时长。
            1.1.1.2 计算密集型程序:程序运行中计算较多，IO操作相对较少，CPU消耗多，执行速度快，几乎没有阻塞。
    1.2 文件分类
        文件是保存在持久化存储设备(硬盘、U盘、光盘)上一个段数据，从格式编码角度分为文本文件(打开后自动解码为字符),
        二进制文件(视频、音频等).在python里把文件视作一种类型的对象，类似之前学习过的其他数据类型
        1.2.1 字节串
            在python3中引入了字节串的概念，与str不同，字节串以字节序列值表达数据，更方便用来处理二进制数据。因此在
            python3中字节串是常见的二进制数据展现方式。
            1.2.1.1 普通的ASCII编码字符串可以在前面加b转换为字节串
                b"hello"
            1.2.1.2 字节串与字符串的转换方式
                1.2.1.2.1 字符串转换为字节串方法：
                    str.encode()
                1.2.1.2.2 字节串转换为字符串方法：
                    bytes.decode()
    1.3 文件操作
        1.3.1 打开文件
            对文件实现读写的操作基本操作步骤为：
                打开文件
                读写文件
                关闭文件
            file_object = open(file_name,access_mode='r',buffering=-1)
            功能: 打开一个文件，返回一个文件对象
            参数:
                file_name文件名
                access_mode 打开文件的方式，如果不写默认为'r'
                buffering:
                    1 表示有行缓冲，默认则表示使用系统默认提供的缓冲机制。
            返回值: 成功返回文件操作对象
        1.3.2 文件打开模式
                r           以读方式打开，文件必须存在
                w           以写方式打开，文件不存在则创建，存在清空原有内容
                a           以追加模式打开
                r+          以读写模式打开，文件必须存在
                w+          以读写模式打开文件，不存在则创建，存在清空原有内容
                a+          以读写模式打开，追加模式
                rb          以二进制读模式打开 同r
                wb          以二进制写模式打开 同w
                ab          以二进制追加模式打开 同a
                rb+         以二进制读写模式打开 同r+
                wb+         以二进制读写模式打开 同w+
                ab+         以二进制读写模式打开 同a+
        1.3.3 关闭文件对象
            打开一个文件后，就可以通过文件对象对文件进行操作了，当操作结束后使用close()关闭这个对象防止一些误操作
            ，也可以节省资源。
            file_boject.close()

02 文件读写操作
    2.1 读文件
        读文件即将文件中内容读取到内存中，常用读文件函数如下：
        2.1.1 read([size])
            功能：来直接读取文件字符
            参数：如果没有给定size参数（默认值为-1）或者size值为负，文件将被读取走至末尾，给定size最多读取给
            定数目字字符（字节）
            返回值：返回读取到的内容

            注意：
                文件过大时候不建议直接读取到文件结尾，读到文件结尾会返回空字符串。
        2.1.2 readline([size])
            功能：用来读取文件中一行
            参数：如果没有给空size参数（默认值为-1）或者size值为负，表示读取一行，给定size表示最多读取给定字符
            （字节）
            返回值：返回读取到的内容
        2.1.3 readlines([sizeint])
            功能：读取文件中的每一行作为列表中的一项
            参数：如果没有给定size参数（默认值为-1）或者size值为负，文件将被读取到末尾，给定的size表示读取到
            size字符所在行为止
            返回值：返回读取到的内容列表
        2.1.4 通过文件对象的迭代进行读取
            文件对象本身也是一个可迭代对象，在for循环中要吧迭代文件每一行。
            for line in f:
                print(line)
    2.2 文件写操作
        2.2.1 write(string)
            功能：把文本数据或者二进制数据块的字符串写入到文件中去
            参数：要写入的内容
            返回值：写入的字符个数

            注意：
                如果需要换行要自己在定入内容添加\n

        2.2.2 writeline(str_list)
            功能：接受一个字符串列表作为参数，将它们写入文件
            参数：要写入的内容列表

    2.3 with语句
        python中with语句使用于对资源进行访问的场合，保证不管处理过程中是否发生错误或者异常都会执行推定的“清理”操作
        ，释放被访问的资源，比如有文件读写后自动关闭、线程中锁的自动获取和释放等。
        with语句的语法格式如下:
            with context_expression [as boj]:
                with_body

        with操作实例：
            with open('file','r+') as f:
                f.read()
03 文件处理细节
    3.1 缓冲区
        缓冲：系统自动的在内存中每一个正在使用的文件开辟一个缓冲区，从内存向磁盘输出数据必须先送到内存缓冲区，再
        由缓冲区送到磁盘中去，从磁盘读数据，则一次从磁盘文件将一批数据读入到内存缓冲区中，然后从缓冲区将数据送到
        程序的数据区。
        3.1.1 文件读写缓冲区
            buffering表示选择的缓冲区类型，默认情况下是系统自定义缓冲，1表示行缓冲，大于1表示设置缓冲区的大小

            刷新缓冲区条件：
                1. 缓冲被写满
                2. 程序执行结束或者文件对象被关闭
                3. 行缓冲遇到换行
                4. 程序中调用了flush()函数
    3.2 文件偏移量
        3.2.1 文件偏移量定义
            打开一个文件进行操作时系统自动生成一个记录，记录中描述了对文件的一系列的操作，其中包括每次操作到的
            文件位置，文件的读写操作都是从这个位置开始进行的。
        3.2.2 文件偏移量的操作
            3.2.2.1 tell方式
                tell()
                功能：获取文件偏移量大小
            3.2.2.2 seek方式
                seek(offset[,whence])
                功能：移动文件偏移量位置
                参数：
                    offset 代表相对于某个位置移动的字节数。负数表示向前移动，正数表示向后移动
                    whence 是基准位置 默认值为0，代表从文件开头算起，1代表从当前位置算起，2代表从文件末尾算起
                注意：
                    必须以二进制方式打开文件时基准位置才能是1或者2
    3.3 文件处理
        3.3.1 获取文件大小
            os.path.getsize(file)
            功能：获取文件大小
            参数：文件路径
            返回值：文件大小（字节)
        3.3.2 查看文件列表
            os.listdir(dir)
            功能：查看文件列表
            参数：目录位置
            返回值：文件列表
        3.3.3 判断文件是否存在
            os.path.exists(file)
            功能：判断文件是否存在
            参数：文件路径
            返回值：存在返回True，不存在返回False
        3.3.4 删除文件
            os.remove(file)
            功能: 删除文件
            参数：文件路径

04 网络基础概念
05 TCP和UDP
06 TCP套接字编程
    6.1 应用层套接字类型
        6.1.1 流式套接字(SOCK_STREAM)
            提供了一个面向连接、可靠的数据传输服务，数据无差错、无重复的发送且按发送顺序接收。内设置流量控制，
            避免数据流淹没慢的接收方，数据被看作是字节流，无长度限制。
        6.1.2 数据报套接接字(SOCK_DGRAM)
            提供无连接服务，数据包以独立数据包的形式发送，不提供无差错保证，数据可能丢失或者重复，顺序发送，可能
            乱序接收。
    6.2 TCP套接字编程
        6.2.1 TCP套接字编程
            6.2.1.1 服务端
                socke ----> bind ----> listen ----> accept-----> send/recv ---- close

            6.2.1.2 TCP服务端套接字函数
                1. socket.socket(family=AF_INET,type=SOCK_STREAM,proto=0)
                    功能：创建一个套接字
                    参数：
                        family:选择地址族类型 AF_INET
                        type: 套接字类型
                            SOCK_STREAM:流式
                            SOCK_DGRAM:数据报
                        proto:子协议类型，没有子协议选择0
                    返回值：套接字对象

                2. sockfd.bind()
                    功能：绑定地址
                    参数：
                        一个元组包含两项，第一项为IP，第二项为端口号
                        例如：('172.16.50.50',8888)

                3. sockfd.listen(5)
                    功能：将套接字设置为监听套接字
                    参数：n是一个正整数，表示监听等待队列的大小
                4. connfd,addr = sockfd.accept()
                    功能：阻塞等待处理客户端连接
                    返回值：
                        第一个： 一个新的套接字用来和客户端通信
                        第二个： 连接的客户端的地址
                5. data = connfd.recv(buffersize)
                    功能：流式套接字接收消息
                    参数：一次最多接收多大的消潘息（单位：字节）
                    返回值：返回接收到的内容
                6. n = connfd.send(data)
                    功能：流式套接字发送消息
                    参数：要发送的内容，要求bytes格式（字节串）
                    返回值：返回实际发送的字节数
                7. sockfd.close()
                    功能：关闭套接字tcp套接字连接断开









