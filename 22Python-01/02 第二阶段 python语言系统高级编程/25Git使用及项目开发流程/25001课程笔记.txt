01 git概述和配置
    1.1 GIT概述
    git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目
    git是Linux Torvalds为了帮助管理linux内核开发而开发的一个开放源码的片控制软件

        1.1.1 版本控制
        版本控制是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程，此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程
        中，确保由不同人所编辑的同一代码文案都得到同步。

        1.1.2 集中式
        集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始操作
        ，再把自己的活推送给中央服务器，集中式版本控制系统有一个缺点就是必须联网才能工作，遇到网速慢的话，可能提交就比较慢。
        SVN是采用集中式。

        1.1.3 分布式
        GIT采用分布式
        分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，工作的时候，不需要联网了，因为版本库就在自己的电脑上，开发者
        之间的协作方式因关GIT的分布式特性而变得更为灵活多样。在集中式系统上，每个开发者就像是连接在集线器上的节点，特此的工作方式大体想像。

    1.2 GIT特点
    git更加适合个人开发，管理开源代码
    git是分布式管理，不同于SVN的集中式管理。这是GIT和其他非分布式的版本控制系统最核心的区别。

    git支持更强大分支功能
    git的内容完整性要优于SVN：git的内容存储使用的SHA-1哈希算法。
    这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。

    git把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件元信息隐藏在一个类似.svn,.cvs等文件里。

    1.3 GIT安装配置
    最早GIT是在LINUX上开发的，很长一段时间内，GIT也只能在linux和unix系统上跑，不过慢慢地有人把它移植到了windows上，现在GIT可以
    LINUX，UNIX，MAC和WINDOWS这几大平台上正常运行了。

    LINUX平台：
        sudo apt-get install git

    Mac OS:
        brew install git

    1.3.1 GIT配置
    git提供了一个叫做git config的工具，专门用来配置或读取相应的工作环境变量。这些环境变量，决定了GIT在各个环节的具体工作方式和行为。
    在做基本操作之间必须要进行这些基本配置：
    这些配置变量可以存放在以下三个不同的地方：
    1.3.1.1 /etc/gitconfig文件
        系统中对所有用户都普遍适用的配置。若使用git config时用 --system选项，读写的就是这个文件

    1.3.1.2 ~/.gitconfig文件
        用户目录下的配置文件只适用于该用户。若使用git config时用 --global选项，读写的就是这个文件

    1.3.1.3 当前项目的git目录中的配置文件（也就是工作目录中的‘.git/config'文件）
        git config 不加任何选项，这样的配置仅仅针对当前项目有效

    每一个级别的配置都会覆盖上层的相同的配置，所以’.git/config'里的配置会覆盖/etc/gitconfig中的同名变量

    1.3.2 基础配置选项

        1.3.2.1 用户名：
            git config --global user.name [yourname]
        1.3.2.2 邮箱：
            git config --global user.email [youremail]

            配置用户名与邮箱将来的项目都会以此用户名与邮箱来命名作者。

        1.3.2.3 编辑器设置（可选项）：
            git config --global core.editor [youreditor]

        1.3.2.4 检查已有的配置信息：
            git config --list

        1.3.2.5 .gitignore文件：
            在git仓库中有时候不需要把所有文件都进行协同操作。创建.gitignore文件。
            把忽略（qrlt)的文件添加进去，这样在同步的时候就不会自动上传。

            .gitignore写法：
                file1  表示把不受此管理的文件名
                *.jpg  表示把所有.jpg结尾的图片不受此管理
                dir/    表示此目录不受此管理
                !img.jpg  表示img这个图片受此约束管理

       1.3.2.6 git init
            把一个开发项目目录初始化一个仓库目录



02 基本命令和版本控制

    2.1 GIT结构
        工作区： 项目所在操作目录，实际操作项目的区域  在本机上
        暂存区： 用于记录工作区的工作（修改）内容  在本机上
        仓库区： 用于备份工作区的内容   在本机上
        远程仓库： 远程主机上的GIT仓库k

    2.2 基本命令
        2.2.1 初始化git仓库
            git init

        2.2.2 查看当前分支状态
            git status

        2.2.3 将文件提交到暂存区
            git add file1 file2

        2.2.4 删除暂存区中的文件
            git rm --cached file

        2.2.5 文件的移动删除
            git mv test/file.config

        2.2.6 将暂存区内容保存提交
            git commit -m 'some message'

        2.2.7 查看提交日志
            git log
            git log --pretty=oneline 每个提交内容显示在一行

        2.2.8 查看当前文件和已提交内容的差别
            git diff file

            2.2.8.1 查看恢复原来的变化（即使rm -rf filename系统命令删除也是可以恢复的）
                git checkout -- filename

    2.3 版本控制

        2.3.1 回到上一个版本
            git reset --hard HEAD^
            回到上一个版本就一个^，回到上两个版本就是两个^,超过10就是HEAD~10

            直接通过commit_id前7位调到某个版本（先通过git log可以查看commit_id),通过commit_id可以调转任意版本。
            git reset --hard 7764c27


        2.3.2 查看所有提交的版本
            git reflog

   2.4 标签操作
        主要应用特别重要的节点，在重要的节点的时候，或者转折的节点可以采用打标签的方式进行提交
        如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，可以使用git tag给它打上标签，git的标签虽然是版本库的快照，
        但其实它就是指向某个commit的指针，这跟分支很像，但是分支可以移动，标签不能移动，所以创建和删除标签都是瞬间完成的。

        2.4.1 打一个v1.0的标签，默认拓最新的commit上
            git tag v1.0

        2.4.2 打在对应的commit_id上
            git tag v0.9 6224637


        2.4.3 查看标签
            git tag

        2.4.4 查看标签commit的具体内容
            git show v1.0

        2.4.5 使用-a指定标签名，-m指定说明文字
            git tag -a v1.0 -m "version 1.0 released" 3628164

        2.4.6 删除标签
            git tag -d v1.0

        2.4.7 依据标签恢复到不同状态
            git reset --hard v1.0






03 保存工作区和分支管理
    版本控制与标签大部分是应用单个文件的修改后保存的，便于后期恢复与调转；而如果针对一个项目所修改文件与代码绝对不仅仅是一个文件，那应该
    “保存工作区”的方式保存多个文件的修改与恢复。

    3.1 保存工作区
        3.1.1 临时保存工作区
            git stash

        3.1.2 查看现有保存的工作区
            git stash list

        3.1.3 恢复到某个工作区
            git stash apply stash@{2}

        3.1.4 恢复并删除上一个工作区
            git stash pop

        3.1.5 删除指定的工作区
            git stash drop stash@{0}

        3.1.6 清除工作区
            git stash clear

    3.2 GIT分支命令
        3.2.1 什么是GIT分支
            几乎每一种版本控制系统都以某种形式支持分支，使用分支意味着可以从开发主线分离开来，然后在不影响主线的同时继续工作。
            假如开发者准备开一个新功能，但是需要两周才能完成，第一周写了50%的代码，如果立刻提交，由于代码还没有写完，不完整的代码
            库会导致别人不能继续干活了，如果等代码全部写完再一次提交，又存在丢失每天的进度的巨大风险。现在有了分支，可以创建一个属于
            开发者自己的分支，别人看不到，还继续在原来的分支上正常工作，而自己在自己的分支上干活，想提交就提交，直到开发完毕后，再一次
            性合并到原来的分支上，这样既安全又不影响别人工作。

            简单描述：
            就是一个项目是多个合作开发，可以每个人编写一个模型或者是功能模块，为不影响主线开发，应该在设计开发时，就应该每个功能模块
            创建一个分支，每个开发者都在自己的分支下进行功能开发，等开发完成后再合并到主线上，进行综合调试开发。

        3.2.2 分支命令
            3.2.2.1 查看当前分支 有*的为当前作用分支
                git branch

                3.2.2.1.1 查看分支包括本地与远程
                    git branch -a

            3.2.2.2 创建一个叫dev的分支
                git branch dev

            3.2.2.3 切换到dev分支
                git checkout dev

            3.2.2.4 创建分支并切换到刚刚创建的分支dev
                git checkout -b dev

            3.2.2.5 合并dev分支到当前分支，快速合并
                git merge dev

            3.2.2.6 删除dev分支
                git branch -d dev
                    -d: 只能删除合并到master后的分支
            3.2.2.7 强行删除分支
                git branch -D dev
                    -D：不但可以删除合并到master的分支，也可以删除没有合并到master的分支


        3.2.3 分支冲突
            冲突问题是合并分支过程中最为棘手的问题：
            1. 当分支合并时，原分支和以前发生了变化就会产生冲突
            2. 当合并分支时添加新的模块（文件），这种冲突可以自动解决，只需要自己决定commit操作即可
            3. 当合并分支时两个分支修改了同一个文件，则需要手动解决冲突

            3.2.3.1 解决分支冲突的最根本的方法
                1. 不要多个分支修改master某一个文件或者多个文件
                2. 如果有必要必须修改的话，请授权某一个分支进行修改，不要多个分支都对master中某个文件或多个文件进行修改。




04 远程仓库和GITHUB使用

    4.1 GitHub介绍
        GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git作为唯一的版本库格式进行托管，故名GitHub

        实际上github就可以看做是一个大的开源仓库。相对于人个主机而言可以视作一个远程仓库。

        地址：www.github.com

    4.2 添加远程仓库
        git remote add origin <远程仓库的地址>
            origin: 为远程仓库的名称（也可以称为远程仓库的别名）

    4.3 将github的项目克隆到本地
        git clone <远程项目git地址>

    4.4 推送代码
        4.4.1 向远程仓库推送代码

            git push -u origin master
                注：第一次推送代码时加-u选项

        4.4.2 推送标签到远程仓库

            4.4.2.1 推送所有标签

                git push origin --tags

            4.4.2.2 推送指定标签

                git push origin v1.0



05 软件项目开发
06 在线词典